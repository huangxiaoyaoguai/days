(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{284:function(t,a,v){"use strict";v.r(a);var _=v(19),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"作用域和闭包"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#作用域和闭包"}},[t._v("#")]),t._v(" 作用域和闭包")]),t._v(" "),v("p",[t._v("##作用域是什么")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("方法只是执行，但是有很多变量需要存储和被访问。简单的说，就是这些变量住在哪里？程序是怎么样找到它。")])]),t._v(" "),v("li",[v("p",[t._v("解决这些问题需要设计良好的规则来存储变量，并且之后可以更好的找到这些变量。这套规则就是叫作用域。")])]),t._v(" "),v("li",[v("p",[t._v("过程")])])]),t._v(" "),v("ol",[v("li",[t._v("分词/词法分析")])]),t._v(" "),v("p",[t._v("这个过程会将字符组成的字符串分解成有意义的代码块，这些代码块被称为词法单元。例如 var a = 2，会分解为 var 、a、 =、2; 。空格是否被作为词法单元，区别是否存在意义。")]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[v("p",[t._v("解析/语法分析\n将词法单元流转化成一个由元素逐级嵌套所组成的代表了程序语法结构的树。这个树叫做“抽象语法树”（ast）。")])]),t._v(" "),v("li",[v("p",[t._v("代码生成")])])]),t._v(" "),v("h3",{attrs:{id:"理解作用域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#理解作用域"}},[t._v("#")]),t._v(" 理解作用域")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("引擎：从头到尾负责这个js程序的编译和执行过程")])]),t._v(" "),v("li",[v("p",[t._v("编译器：负责语法分析及代码生成等脏活累活。")])]),t._v(" "),v("li",[v("p",[t._v("作用域：负责收集并维护所有声明的标识符（变量）组成的一系列的查询，并实施一套非常严格的规则，确定当前执行的代码对这些有访问的权限。")])])]),t._v(" "),v("p",[t._v("##词法作用域")]),t._v(" "),v("ul",[v("li",[t._v("词法作用域是定义在词法阶段的作用域。其实是你在写代码时将变量和快作用域写在哪里决定的，因此当词法分析器处理代码时会保持作用域不变。")])]),t._v(" "),v("p",[t._v("eval、with会欺骗词法")]),t._v(" "),v("h2",{attrs:{id:"函数作用域和快作用域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域和快作用域"}},[t._v("#")]),t._v(" 函数作用域和快作用域")]),t._v(" "),v("ul",[v("li",[t._v("函数作用域")])]),t._v(" "),v("h2",{attrs:{id:"提升"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#提升"}},[t._v("#")]),t._v(" 提升")]),t._v(" "),v("h2",{attrs:{id:"闭包"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[t._v("《JavaScript权威指南》中就讲到：从技术的角度讲，所有的JavaScript函数都是闭包。\nECMAScript中，闭包指的是：\n\n\t1.从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。\n\t2.从实践角度：以下函数才算是闭包：\n\t即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）\n\t在代码中引用了自由变量\n\n\nmdn 对闭包的定义为：\n- 闭包是指那些能够访问自由变量的函数\n\n什么是自由变量。\n\n-自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量\n\n所以：闭包 = 函数+函数能够访问的自由变量\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);